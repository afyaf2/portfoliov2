function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { createContext } from "react";

// most things that we auto-id aren't server rendered, and are rendered into
// portals anyway, so we can get away with random ids in a default context. If
// people need to server render with auto-ids, they can wrap their app in an
// IdProvider
var genId = function genId() {
  return Math.random().toString(32).substr(2, 6);
};

var IdContext = createContext(genId);

// Apps can wrap their app in this to get the same IDs on the server and the
// client

var Provider = function (_React$Component) {
  _inherits(Provider, _React$Component);

  function Provider() {
    var _temp, _this, _ret;

    _classCallCheck(this, Provider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.id = 0, _this.genId = function () {
      return ++_this.id;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Provider.prototype.render = function render() {
    return React.createElement(
      IdContext.Provider,
      { value: this.genId },
      this.props.children
    );
  };

  return Provider;
}(React.Component);

var Consumer = IdContext.Consumer;


export { Provider, Consumer };